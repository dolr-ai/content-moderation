name: Fly Deploy GPU
on:
  push:
    branches:
      - benchmark
  workflow_dispatch: {}

jobs:
  deploy:
    name: Deploy GPU app
    runs-on: ubuntu-latest
    concurrency: deploy-group-gpu
    # Enable debug logging for GitHub Actions
    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: superfly/flyctl-actions/setup-flyctl@master

      # Print system info
      - name: Print system info
        run: |
          echo "System information:"
          uname -a
          free -h
          df -h
          cat /etc/os-release

      # Ensure cache directories exist
      - name: Create cache directories
        run: |
          mkdir -p /tmp/.buildx-cache
          mkdir -p /tmp/uv-cache
          chmod -R 777 /tmp/.buildx-cache
          chmod -R 777 /tmp/uv-cache

      # Set up Docker Buildx with optimized configuration
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:latest

      # Cache Docker layers with simplified key strategy
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ hashFiles('src_deploy/requirements_master.txt') }}
          restore-keys: |
            buildx-

      # Set up UV for faster Python package installation
      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/requirements*.txt
          prune-cache: false

      # Set Fly secrets
      - name: Set Fly secrets
        run: |
          echo "Setting Fly secrets..."
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" API_KEY="$API_KEY"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" HF_TOKEN="$HF_TOKEN"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" GCP_CREDENTIALS="$GCP_CREDENTIALS"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" GCS_BUCKET="$GCS_BUCKET"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" GCS_EMBEDDINGS_PATH="$GCS_EMBEDDINGS_PATH"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" GCS_PROMPT_PATH="$GCS_PROMPT_PATH"
        env:
          API_KEY: ${{ secrets.API_KEY }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
          GCS_EMBEDDINGS_PATH: ${{ secrets.GCS_EMBEDDINGS_PATH }}
          GCS_PROMPT_PATH: ${{ secrets.GCS_PROMPT_PATH }}

      - name: check fly secrets
        run: |
          echo "Checking fly secrets..."
          flyctl secrets list --app stage-content-moderation-server-gpu --verbose
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}

      # Check fly status
      - name: Check fly status
        run: |
          echo "Checking fly status..."
          flyctl status --app stage-content-moderation-server-gpu --verbose
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}

      # Verify Dockerfile exists
      - name: Verify Dockerfile
        run: |
          echo "Checking if Dockerfile exists..."
          ls -la ./src_deploy/
          cat ./src_deploy/gpu.Dockerfile

      # Prepare for cached build
      - name: Prepare cache directories
        run: |
          # Prepare for new caches
          [ -d "/tmp/.buildx-cache" ] && mv /tmp/.buildx-cache /tmp/.buildx-cache-old || mkdir -p /tmp/.buildx-cache-old
          mkdir -p /tmp/.buildx-cache-new

      # Deploy to Fly with proper layer caching
      - name: Deploy a docker container to fly.io
        run: |
          echo "Using Docker BuildKit for caching"

          # Show cache contents
          echo "Cache contents before build:"
          ls -la /tmp/.buildx-cache-old || echo "No cache yet"

          # Deploy with explicit cache mounting
          flyctl deploy --remote-only \
            --config src_deploy/gpu.fly.toml \
            --dockerfile ./src_deploy/gpu.Dockerfile \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-flag=--cache-from=type=local,src=/tmp/.buildx-cache-old \
            --build-flag=--cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --no-cache=false

          # Clean up old cache and keep the new one
          rm -rf /tmp/.buildx-cache-old
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

          echo "Cache contents after build:"
          ls -la /tmp/.buildx-cache || echo "No cache generated"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}
          DOCKER_BUILDKIT: 1