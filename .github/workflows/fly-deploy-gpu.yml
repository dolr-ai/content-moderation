name: Fly Deploy GPU
on:
  push:
    branches:
      - benchmark
  workflow_dispatch: {}

jobs:
  deploy:
    name: Deploy GPU app
    runs-on: ubuntu-latest
    concurrency: deploy-group-gpu
    # Enable debug logging for GitHub Actions
    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: superfly/flyctl-actions/setup-flyctl@master

      # Print system info
      - name: Print system info
        run: |
          echo "System information:"
          uname -a
          free -h
          df -h
          cat /etc/os-release

      # Set environment variables for BuildKit
      - name: Set BuildKit environment variables
        run: |
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
          echo "BUILDKIT_PROGRESS=plain" >> $GITHUB_ENV

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      # Create cache directories
      - name: Create cache directories
        run: |
          mkdir -p /tmp/uv-cache
          chmod -R 777 /tmp/uv-cache

      # Set up UV for faster Python package installation
      - name: Set up UV
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/requirements*.txt
          prune-cache: false

      # Set Fly secrets
      - name: Set Fly secrets
        run: |
          echo "Setting Fly secrets..."
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" API_KEY="$API_KEY"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" HF_TOKEN="$HF_TOKEN"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" GCP_CREDENTIALS="$GCP_CREDENTIALS"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" GCS_BUCKET="$GCS_BUCKET"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" GCS_EMBEDDINGS_PATH="$GCS_EMBEDDINGS_PATH"
          flyctl secrets set --stage --app "stage-content-moderation-server-gpu" GCS_PROMPT_PATH="$GCS_PROMPT_PATH"
        env:
          API_KEY: ${{ secrets.API_KEY }}
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
          GCS_EMBEDDINGS_PATH: ${{ secrets.GCS_EMBEDDINGS_PATH }}
          GCS_PROMPT_PATH: ${{ secrets.GCS_PROMPT_PATH }}

      - name: check fly secrets
        run: |
          echo "Checking fly secrets..."
          flyctl secrets list --app stage-content-moderation-server-gpu --verbose
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}

      # Check fly status
      - name: Check fly status
        run: |
          echo "Checking fly status..."
          flyctl status --app stage-content-moderation-server-gpu --verbose
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}

      # Modify Dockerfile to add cache mount
      - name: Update Dockerfile with Cache Mount
        run: |
          # Get the original file
          cat ./src_deploy/gpu.Dockerfile > ./src_deploy/gpu.Dockerfile.orig

          # Replace the RUN command that installs requirements with a cached version
          cat ./src_deploy/gpu.Dockerfile.orig | sed 's/RUN uv venv \$HOME\/.venv/RUN --mount=type=cache,target=\/home\/$NB_USER\/.cache\/uv uv venv \$HOME\/.venv/g' > ./src_deploy/gpu.Dockerfile

          echo "Updated Dockerfile:"
          cat ./src_deploy/gpu.Dockerfile

          # Check if the replacement worked
          grep -A 3 "mount=type=cache" ./src_deploy/gpu.Dockerfile || echo "Failed to update Dockerfile"

      # Deploy to Fly with optimized settings
      - name: Deploy a docker container to fly.io
        run: |
          echo "Deploying with Docker BuildKit enabled"

          # Deploy with BuildKit enabled and build secrets
          flyctl deploy --remote-only \
            --config src_deploy/gpu.fly.toml \
            --dockerfile ./src_deploy/gpu.Dockerfile \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-secret id=uv_cache,src=/tmp/uv-cache \
            --no-cache=false
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}
          DOCKER_BUILDKIT: 1